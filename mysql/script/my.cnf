#多实例安装
#注释[mysqld3308]和[mysqld3309]
#安装5.7
#使能[mysqld3308]和[mysqld3309]
#安装5.6
#使能/etc/mysql/my.cnf中[client]的密码，可自动登录
[client]
user = root
#mysql会读取此处的密码，5.6安装后root默认没有密码
#此处需要先注释，安装完成后再启用
password = Pyl123456

[mysql]
prompt = (\\u@\\h:\\p) [\\d]>\\_

[mysqldump]
#在一个事务中导出，确保产生一致性的备份
#single-transaction
#备份时dump出change master信息(file和pos)，可供主从复制时使用
#master-data = 1

[mysqld]
######basic settings######
#启动单实例时需要指定路径
basedir = /usr/local/mysql/mysql_57
datadir = /var/data/mysql/data1
plugin_dir = /usr/local/mysql/mysql_57/lib/plugin
#basedir = /usr/local/mysql/mysql_56
#datadir = /var/data/mysql/data1
tmpdir = /tmp
server-id = 11 
port = 3306
#用mysql用户启动实例
user = mysql
#默认是*，绑定到所有IP地址，数据库集群一般在内网，绑定到1个内网地址
#需要绑定到多个IP地址，设置为*，在iptables中设置防火墙规则，限制IP地址访问
#bind_address = 192.168.8.10
#不进行自动提交，需要显式begin/commit
#导入employees库，需要自动提交，否则没有数据
autocommit = 0
#建表默认使用的字符编码
character_set_server = utf8mb4
#域名解析
skip_name_resolve = 1
#启动时忽略授权表，在忘记用户密码时添加
#skip-grant-tables
#最大连接(用户)数。每个连接MySQL的用户均算作一个连接
#MySQL无论如何都会保留一个用于管理员登录的连接，用于管理员连接数据库进行维护操作
#即使当前连接数已经达到了max_connections。因此MySQL的实际最大可连接数为max_connections+1
#sysbench设置num-threads = 1024时，需要调大这个值
#max_connections需要合理设置，设置过大会加重CPU负载
max_connections = 256
#某个客户端的连接达到了max_connect_errors的限制，将被禁止访问
max_connect_errors = 100
#需要有线程池插件，设置使用线程池处理连接
#thread_handing = pool-of-threads
#推荐使用RC，并发性能更好
transaction_isolation = READ-COMMITTED
explicit_defaults_for_timestamp = 1
#Using join buffer，需要增大join_buffer_size
join_buffer_size = 128M
read_buffer_size = 16M
#Using MRR，需要增大read_rnd_buffer_size
read_rnd_buffer_size = 32M
#Using filesort，需要增大sort_buffer_size
sort_buffer_size = 32M
#Using temporary，需要增大tmp_table_size
tmp_table_size = 64M
max_allowed_packet = 16M
sql_mode = "STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"
interactive_timeout = 1800
wait_timeout = 1800
#密码强度插件
#plugin_load = "validate_password.so"
#提升高并发下元数据锁性能，该参数仅在5.6下有效，5.7使用无锁结构进行优化
#metadata_locks_hash_instances = 64
#增大InnoDB缓存文件句柄的数量
innodb_open_files = 4096
#增大缓存表的数量
table_open_cache = 4096
#调大缓存frm表的数量，太小导致show table status长时间等待
table_definition_cache = 4096
#提升高并发性能
table_open_cache_instances = 128
#增大线程缓存，提升短连接性能。通常用连接池进行长连接操作
thread_cache_size = 64

#######log settings######
#错误日志文件，不进行配置则默认是机器名称
log_error = error.log
#是否开启慢查询日志，导入dbt3库时禁用
slow_query_log = 1
#慢查询日志文件名
slow_query_log_file = slow.log
#没有使用索引的SQL是否记录到慢查询日志
log_queries_not_using_indexes = 1
#是否记录管理操作，如alter table
log_slow_admin_statements = 1
#从机是否开启慢查询日志
log_slow_slave_statements = 1
#每分钟记录到慢查询中没有使用索引的SQL次数
log_throttle_queries_not_using_indexes = 10
#日志有效期，过期删除
expire_logs_days = 90
#慢查询阈值，支持毫秒，可以在线动态修改
long_query_time = 2
#扫描记录少于该值的SQL不会记录到慢查询日志
min_examined_row_limit = 100
#通用日志，一般不开启，性能下降明显
#银行等金融机构开启，作为审计，可以使用审计插件，性能较好o
#学习时开启，理解执行流程
#general_log = 1
#general_log_file = general.log

######replication settings######
#设为TABLE，IO线程保存已接收的binlog位置到表中，对5.7并行复制有帮助
#设为FILE，则写入master.log
master_info_repository = TABLE
#保证SQL线程crash safe，SQL线程回放event与记录回放event的位置，两者放在一个事务中，保持一致
relay_log_info_repository = TABLE
#relay log文件名，IO线程接收的binlog写入此文件
relay_log = relay.log
#保证IO线程crash safe，宕机后不使用已经接收的binlog，IO线程通过SQL线程回放的位置从Master重新拉取binlog
#开启GTID，Crash Safe无需开启此参数
#见官网文档16.3.2 Handling an Unexpected Halt of a Replication Slave
#https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-unexpected-slave-halt.html
relay_log_recovery = 1
#slave设置只读
#super_read_only = 1
#binlog文件名
log_bin = bin
#sync_binlog=n，每进行n次事务提交之后，MySQL将执行一次fsync之类的磁盘同步指令将binlog_cache中的数据强制写入磁盘
sync_binlog = 1
#默认32k，如果binlog_cache_disk_use值较高，需要调大
#binlog_cache_size = 32768
#开启GTID模式，GTID全局唯一，不再依赖于filename+position
#change master to master_auto_position = gtid值
gtid_mode = on
enforce_gtid_consistency = 1
#级联复制需要配置，master的binlog在slave上回放，slave也产生binlog
log_slave_updates = 1
#binlog文件格式，5.7默认为row，保证复制主从数据一致
binlog_format = row
#显示binlog中一行数据变化对应的SQL语句，见binlog的Rows_query
binlog_rows_query_log_events = 1
slave_skip_errors = ddl_exist_errors
#并行复制，5.7支持logical_clock(基于组提交实现，位于同一组的事务之间是没有锁冲突的，可以多线程回放)
#5.6支持database(每个库1个线程，一般是1个库多张表，即使有2、3个库，并行度也就是2、3个线程，基于database的并行复制使用不多)
slave_parallel_type = logical_clock
#设为8个线程足够，16个用不完
slave_parallel_workers = 8

######semi sync replication settings######
#plugin_load = "rpl_semi_sync_master:semisync_master.so;rpl_semi_sync_slave:semisync_slave.so"
#设为0则是异步复制
#rpl_semi_sync_master_enabled = 1
#rpl_semi_sync_slave_enabled = 1
#超时默认为10s，超时转为异步复制
#rpl_semi_sync_master_timeout = 5000

######innodb settings######
#页大小越大一次读入的记录越多，性能越好
#页是最小IO单位
#区是最小空间申请单位，固定为1M
innodb_page_size = 16K 
#buffer pool大小设为内存的60~70%
#5.7可以在线调整大小，云数据库开发比较有用
innodb_buffer_pool_size = 2G
#设置多个instance可将热点打散，多线程访问会有资源竞争，拆分latch提高并发性能
#建议设置成CPU核数，latch可以充分使用每个核
innodb_buffer_pool_instances = 8
#启动时加载dump的文件，恢复到Buffer Pool中
innodb_buffer_pool_load_at_startup = 1
#在停机时dump出Buffer Pool中的Space Id，Page Number
innodb_buffer_pool_dump_at_shutdown = 1
#防止大表在DML比较多的场景下Online DDL操作失败
#Online DDL使用的缓存大小
innodb_online_alter_log_max_size = 128M
#每次进行LRU List刷新的脏页的数量
#该值不能超过innodb_io_capacity / innodb_buffer_pool_instances
#见Checkpoint.md
innodb_lru_scan_depth = 500
#锁等待超时
innodb_lock_wait_timeout = 30
#输出锁信息
innodb_status_output_locks = 1
#每条记录自增后就释放自增锁，而不是整条SQL执行完毕再释放，提高并发度
#自增列不要求连续，单调自增即可
innodb_autoinc_lock_mode = 2
#InnoDB用到的IOPS，设置为使用sysbench测试得到的写入IOPS
#一次最多刷新脏页的能力
innodb_io_capacity = 4000
innodb_io_capacity_max = 8000
#O_DIRECT避免两次缓存
innodb_flush_method = O_DIRECT
innodb_file_format = Barracuda
innodb_file_format_max = Barracuda
#innodb_log_group_home_dir = /redolog/
#innodb_undo_directory = /undolog/
innodb_undo_logs = 128
#3个undo表空间
innodb_undo_tablespaces = 3
#每张表一个表空间文件，设为0则存储在ibdata1中
#innodb_file_per_table = 1
#刷新脏页所在区的所有脏页，合并IO，随机转顺序的优化
#SSD设置为0，关闭此功能
innodb_flush_neighbors = 1
#redo大小，设为4G或更高
innodb_log_file_size = 128M
#redo buffer大小
innodb_log_buffer_size = 16M
#保证事务提交时执行fsync将redo log落盘
#innodb_flush_log_at_trx_commit=1
#事务提交分为三个阶段，采用内部XA事务进行保证
#innodb_support_xa=1
innodb_large_prefix = 1
innodb_thread_concurrency = 64
#将所有死锁信息输出到错误日志
innodb_print_all_deadlocks = 1
innodb_strict_mode = 1
innodb_sort_buffer_size = 64M

#此标签表示启动5.7实例时以下参数才会生效
[mysqld-5.7]
#dump出每个Buffer Pool实例中最近使用的页的N%的数据
innodb_buffer_pool_dump_pct = 40
#刷新脏页的线程数，设为8/16
innodb_page_cleaners = 4
#异步写线程数，设为8/16
innodb_write_io_threads = 8
#回收undo log的线程数
innodb_purge_threads = 4
innodb_undo_log_truncate = 1
innodb_max_undo_log_size = 2G
innodb_purge_rseg_truncate_frequency = 128
binlog_gtid_simple_recovery = 1
#默认开启死锁检测，关闭后靠锁超时解决死锁
#锁超时不会回滚事务
#死锁检测会选择回滚一个事务，5.6下开启此参数会报错
innodb_deadlock_detect = 1
#5.7添加的参数，默认是UTC，会相差8小时
log_timestamps = system
show_compatibility_56 = on
######lossless semi-sync replication######
#after_sync表示两阶段提交中第2步写入binlog之后即发送binlog，等待ack确认
#插入记录不可见，因为要接收到ack，才提交，保证主从数据一致
#after_commit表示两阶段提交中第3步commit执行成功后发送binlog，等待ack确认
#插入记录可见，如果等待ack过程中发生主从切换，主从数据不一致
#丢失最后一个组提交的事务数据
#无损半同步复制性能取决于网络速度
#sysbench执行update测试，无损半同步复制比异步复制最坏情况下性能下降30%
#提升线程数，num-threads从16->1024，吞吐量增大
#无损半同步复制+MHA(自动选主)实现高可用
#rpl_semi_sync_master_wait_point = after_sync
#1个Slave发送ack才能提交成功，1个集群有一半的Slave接收成功即可
#一主四从，此处设为2
#rpl_semi_sync_master_wait_for_slave_count = 1
######group replication setting######
#transaction_write_set_extraction = MURMUR32
#binlog_checksum = NONE 
#plugin_load = group_replication.so
#1个MGR集群的group_name是一致的
#group_replication_group_name = e5720089-6b00-11e5-b248-fa163e30f9a2
#MySQL启动时是否启动MGR
#group_replication_start_on_boot = 1
#group_replication_recovery_user = 'rpl_user'
#group_replication_recovery_password = 'rpl_pass'
#MGR在3306/3307等端口之外，建立2490x端口基于Paxos协议进行binlog同步
#group_replication_local_address = "127.0.0.1:24902"
#MGR集群的IP地址和端口号
#group_replication_group_seeds = "127.0.0.1:24901,127.0.0.1:24902,127.0.0.1:24903"
#初始化MGR集群，只需第1个节点在mysql shell中手动执行
#group_replication_bootstrap_group = off

#在root下使用mysqld_multi
[mysqld_multi]
#可以配置为mysqld，但无法拥有守护功能，进程挂掉不会重启
mysqld = /usr/local/mysql/mysql_57/bin/mysqld_safe
mysqladmin = /usr/local/mysql/mysql_57/bin/mysqladmin
#mysqld_multi启动/关闭mysqld使用的用户名，没有配置默认使用[client]标签下的用户名和密码
user = multi_admin
#这里是pass，password不起作用
pass = Pyl123456
log = /var/data/mysql/mysqld_multi.log

#[mysqldx]的配置项和[mysqld]会合并，并且会覆盖[mysqld]下相同配置项
#每个实例可以分配不同大小的buffer_pool
[mysqld3306]
#每个实例的server-id要不同，否则复制会导致宕机
server-id = 11
socket = /tmp/mysql.sock1
port = 3306
#这是绝对路径，和初始化指定数据目录保持一致，不一致会导致无法登录
datadir = /var/data/mysql/data1
#启动多实例时需要指定路径
basedir = /usr/local/mysql/mysql_57

[mysqld3307]
server-id = 12
socket = /tmp/mysql.sock2
port = 3307
datadir = /var/data/mysql/data2
basedir = /usr/local/mysql/mysql_57

#先安装5.7的实例，需要注释以下2个标签
#否则5.7多实例初始化会报错
#[mysqld3308]
#server-id = 13
#socket = /tmp/mysql.sock3
#port = 3308
#datadir = /var/data/mysql/data3
#basedir = /usr/local/mysql/mysql_56

#[mysqld3309]
#server-id = 14
#socket = /tmp/mysql.sock4
#port = 3309
#datadir = /var/data/mysql/data4
#basedir = /usr/local/mysql/mysql_56
